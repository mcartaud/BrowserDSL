/*
* generated by Xtext
*/
grammar InternalBrowserDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.mda.project.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.mda.project.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.mda.project.services.BrowserDSLGrammarAccess;

}

@parser::members {
 
 	private BrowserDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BrowserDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleMain
entryRuleMain 
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMainAccess().getGroup()); }
(rule__Main__Group__0)
{ after(grammarAccess.getMainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubRoutineCall
entryRuleSubRoutineCall 
:
{ before(grammarAccess.getSubRoutineCallRule()); }
	 ruleSubRoutineCall
{ after(grammarAccess.getSubRoutineCallRule()); } 
	 EOF 
;

// Rule SubRoutineCall
ruleSubRoutineCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubRoutineCallAccess().getIdAssignment()); }
(rule__SubRoutineCall__IdAssignment)
{ after(grammarAccess.getSubRoutineCallAccess().getIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleList
entryRuleList 
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListAccess().getGroup()); }
(rule__List__Group__0)
{ after(grammarAccess.getListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClickableElement
entryRuleClickableElement 
:
{ before(grammarAccess.getClickableElementRule()); }
	 ruleClickableElement
{ after(grammarAccess.getClickableElementRule()); } 
	 EOF 
;

// Rule ClickableElement
ruleClickableElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClickableElementAccess().getAlternatives()); }
(rule__ClickableElement__Alternatives)
{ after(grammarAccess.getClickableElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFillableElement
entryRuleFillableElement 
:
{ before(grammarAccess.getFillableElementRule()); }
	 ruleFillableElement
{ after(grammarAccess.getFillableElementRule()); } 
	 EOF 
;

// Rule FillableElement
ruleFillableElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFillableElementAccess().getTextFieldParserRuleCall()); }
	ruleTextField
{ after(grammarAccess.getFillableElementAccess().getTextFieldParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheckableElement
entryRuleCheckableElement 
:
{ before(grammarAccess.getCheckableElementRule()); }
	 ruleCheckableElement
{ after(grammarAccess.getCheckableElementRule()); } 
	 EOF 
;

// Rule CheckableElement
ruleCheckableElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckableElementAccess().getCheckboxParserRuleCall()); }
	ruleCheckbox
{ after(grammarAccess.getCheckableElementAccess().getCheckboxParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClick
entryRuleClick 
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClickAccess().getGroup()); }
(rule__Click__Group__0)
{ after(grammarAccess.getClickAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFill
entryRuleFill 
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFillAccess().getGroup()); }
(rule__Fill__Group__0)
{ after(grammarAccess.getFillAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClear
entryRuleClear 
:
{ before(grammarAccess.getClearRule()); }
	 ruleClear
{ after(grammarAccess.getClearRule()); } 
	 EOF 
;

// Rule Clear
ruleClear
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClearAccess().getGroup()); }
(rule__Clear__Group__0)
{ after(grammarAccess.getClearAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerify
entryRuleVerify 
:
{ before(grammarAccess.getVerifyRule()); }
	 ruleVerify
{ after(grammarAccess.getVerifyRule()); } 
	 EOF 
;

// Rule Verify
ruleVerify
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVerifyAccess().getGroup()); }
(rule__Verify__Group__0)
{ after(grammarAccess.getVerifyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExist
entryRuleExist 
:
{ before(grammarAccess.getExistRule()); }
	 ruleExist
{ after(grammarAccess.getExistRule()); } 
	 EOF 
;

// Rule Exist
ruleExist
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistAccess().getGroup()); }
(rule__Exist__Group__0)
{ after(grammarAccess.getExistAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoTo
entryRuleGoTo 
:
{ before(grammarAccess.getGoToRule()); }
	 ruleGoTo
{ after(grammarAccess.getGoToRule()); } 
	 EOF 
;

// Rule GoTo
ruleGoTo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoToAccess().getGroup()); }
(rule__GoTo__Group__0)
{ after(grammarAccess.getGoToAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getAlternatives()); }
(rule__Variable__Alternatives)
{ after(grammarAccess.getVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableString
entryRuleVariableString 
:
{ before(grammarAccess.getVariableStringRule()); }
	 ruleVariableString
{ after(grammarAccess.getVariableStringRule()); } 
	 EOF 
;

// Rule VariableString
ruleVariableString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableStringAccess().getGroup()); }
(rule__VariableString__Group__0)
{ after(grammarAccess.getVariableStringAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableUrl
entryRuleVariableUrl 
:
{ before(grammarAccess.getVariableUrlRule()); }
	 ruleVariableUrl
{ after(grammarAccess.getVariableUrlRule()); } 
	 EOF 
;

// Rule VariableUrl
ruleVariableUrl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableUrlAccess().getGroup()); }
(rule__VariableUrl__Group__0)
{ after(grammarAccess.getVariableUrlAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableList
entryRuleVariableList 
:
{ before(grammarAccess.getVariableListRule()); }
	 ruleVariableList
{ after(grammarAccess.getVariableListRule()); } 
	 EOF 
;

// Rule VariableList
ruleVariableList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableListAccess().getGroup()); }
(rule__VariableList__Group__0)
{ after(grammarAccess.getVariableListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheckbox
entryRuleCheckbox 
:
{ before(grammarAccess.getCheckboxRule()); }
	 ruleCheckbox
{ after(grammarAccess.getCheckboxRule()); } 
	 EOF 
;

// Rule Checkbox
ruleCheckbox
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckboxAccess().getGroup()); }
(rule__Checkbox__Group__0)
{ after(grammarAccess.getCheckboxAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLink
entryRuleLink 
:
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinkAccess().getGroup()); }
(rule__Link__Group__0)
{ after(grammarAccess.getLinkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleButton
entryRuleButton 
:
{ before(grammarAccess.getButtonRule()); }
	 ruleButton
{ after(grammarAccess.getButtonRule()); } 
	 EOF 
;

// Rule Button
ruleButton
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getButtonAccess().getGroup()); }
(rule__Button__Group__0)
{ after(grammarAccess.getButtonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImage
entryRuleImage 
:
{ before(grammarAccess.getImageRule()); }
	 ruleImage
{ after(grammarAccess.getImageRule()); } 
	 EOF 
;

// Rule Image
ruleImage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImageAccess().getGroup()); }
(rule__Image__Group__0)
{ after(grammarAccess.getImageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextField
entryRuleTextField 
:
{ before(grammarAccess.getTextFieldRule()); }
	 ruleTextField
{ after(grammarAccess.getTextFieldRule()); } 
	 EOF 
;

// Rule TextField
ruleTextField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextFieldAccess().getGroup()); }
(rule__TextField__Group__0)
{ after(grammarAccess.getTextFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getClickParserRuleCall_0()); }
	ruleClick
{ after(grammarAccess.getActionAccess().getClickParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getFillParserRuleCall_1()); }
	ruleFill
{ after(grammarAccess.getActionAccess().getFillParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getActionAccess().getClearParserRuleCall_2()); }
	ruleClear
{ after(grammarAccess.getActionAccess().getClearParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getActionAccess().getVerifyParserRuleCall_3()); }
	ruleVerify
{ after(grammarAccess.getActionAccess().getVerifyParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getActionAccess().getExistParserRuleCall_4()); }
	ruleExist
{ after(grammarAccess.getActionAccess().getExistParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getActionAccess().getGoToParserRuleCall_5()); }
	ruleGoTo
{ after(grammarAccess.getActionAccess().getGoToParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getActionAccess().getSubRoutineCallParserRuleCall_6()); }
	ruleSubRoutineCall
{ after(grammarAccess.getActionAccess().getSubRoutineCallParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getClickableElementParserRuleCall_0()); }
	ruleClickableElement
{ after(grammarAccess.getElementAccess().getClickableElementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getFillableElementParserRuleCall_1()); }
	ruleFillableElement
{ after(grammarAccess.getElementAccess().getFillableElementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementAccess().getCheckableElementParserRuleCall_2()); }
	ruleCheckableElement
{ after(grammarAccess.getElementAccess().getCheckableElementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClickableElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickableElementAccess().getLinkParserRuleCall_0()); }
	ruleLink
{ after(grammarAccess.getClickableElementAccess().getLinkParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClickableElementAccess().getButtonParserRuleCall_1()); }
	ruleButton
{ after(grammarAccess.getClickableElementAccess().getButtonParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getClickableElementAccess().getImageParserRuleCall_2()); }
	ruleImage
{ after(grammarAccess.getClickableElementAccess().getImageParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClearAccess().getFillableElementParserRuleCall_1_0()); }
	ruleFillableElement
{ after(grammarAccess.getClearAccess().getFillableElementParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getClearAccess().getCheckableElementParserRuleCall_1_1()); }
	ruleCheckableElement
{ after(grammarAccess.getClearAccess().getCheckableElementParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getFillableElementParserRuleCall_1_0()); }
	ruleFillableElement
{ after(grammarAccess.getVerifyAccess().getFillableElementParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getVerifyAccess().getCheckableElementParserRuleCall_1_1()); }
	ruleCheckableElement
{ after(grammarAccess.getVerifyAccess().getCheckableElementParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getURLTerminalRuleCall_1_0()); }
	RULE_URL
{ after(grammarAccess.getGoToAccess().getURLTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getGoToAccess().getVariableUrlParserRuleCall_1_1()); }
	ruleVariableUrl
{ after(grammarAccess.getGoToAccess().getVariableUrlParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVariableListParserRuleCall_0()); }
	ruleVariableList
{ after(grammarAccess.getVariableAccess().getVariableListParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getVariableStringParserRuleCall_1()); }
	ruleVariableString
{ after(grammarAccess.getVariableAccess().getVariableStringParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVariableAccess().getVariableUrlParserRuleCall_2()); }
	ruleVariableUrl
{ after(grammarAccess.getVariableAccess().getVariableUrlParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Checkbox__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckboxAccess().getSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING
{ after(grammarAccess.getCheckboxAccess().getSTRINGTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getCheckboxAccess().getVariableParserRuleCall_1_1()); }
	ruleVariable
{ after(grammarAccess.getCheckboxAccess().getVariableParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING
{ after(grammarAccess.getLinkAccess().getSTRINGTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getLinkAccess().getVariableParserRuleCall_1_1()); }
	ruleVariable
{ after(grammarAccess.getLinkAccess().getVariableParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING
{ after(grammarAccess.getButtonAccess().getSTRINGTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getButtonAccess().getVariableParserRuleCall_1_1()); }
	ruleVariable
{ after(grammarAccess.getButtonAccess().getVariableParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageAccess().getSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING
{ after(grammarAccess.getImageAccess().getSTRINGTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getImageAccess().getVariableParserRuleCall_1_1()); }
	ruleVariable
{ after(grammarAccess.getImageAccess().getVariableParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextField__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextFieldAccess().getSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING
{ after(grammarAccess.getTextFieldAccess().getSTRINGTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getTextFieldAccess().getVariableParserRuleCall_1_1()); }
	ruleVariable
{ after(grammarAccess.getTextFieldAccess().getVariableParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainAssignment_0()); }
(rule__Model__MainAssignment_0)
{ after(grammarAccess.getModelAccess().getMainAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getModelAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Main__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getActionsAssignment_0()); }
(rule__Main__ActionsAssignment_0)
{ after(grammarAccess.getMainAccess().getActionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getGroup_1()); }
(rule__Main__Group_1__0)*
{ after(grammarAccess.getMainAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Main__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group_1__0__Impl
	rule__Main__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getMainAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getActionAssignment_1_1()); }
(rule__Main__ActionAssignment_1_1)
{ after(grammarAccess.getMainAccess().getActionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__List__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getListAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElementAssignment_1()); }
(rule__List__ElementAssignment_1)
{ after(grammarAccess.getListAccess().getElementAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__2__Impl
	rule__List__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getGroup_2()); }
(rule__List__Group_2__0)*
{ after(grammarAccess.getListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getListAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__List__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__0__Impl
	rule__List__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getCommaSpaceKeyword_2_0()); }

	', ' 

{ after(grammarAccess.getListAccess().getCommaSpaceKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElementAssignment_2_1()); }
(rule__List__ElementAssignment_2_1)
{ after(grammarAccess.getListAccess().getElementAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Click__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }

	'click(' 

{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Click__Group__1__Impl
	rule__Click__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickAccess().getClickableElementParserRuleCall_1()); }
	ruleClickableElement
{ after(grammarAccess.getClickAccess().getClickableElementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Click__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getClickAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fill__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }

	'fill(' 

{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__1__Impl
	rule__Fill__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFillableElementParserRuleCall_1()); }
	ruleFillableElement
{ after(grammarAccess.getFillAccess().getFillableElementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__2__Impl
	rule__Fill__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getValueKeyword_2()); }

	', value=' 

{ after(grammarAccess.getFillAccess().getValueKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__3__Impl
	rule__Fill__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getSTRINGTerminalRuleCall_3()); }
	RULE_STRING
{ after(grammarAccess.getFillAccess().getSTRINGTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFillAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Clear__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clear__Group__0__Impl
	rule__Clear__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClearAccess().getClearKeyword_0()); }

	'clear(' 

{ after(grammarAccess.getClearAccess().getClearKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clear__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clear__Group__1__Impl
	rule__Clear__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClearAccess().getAlternatives_1()); }
(rule__Clear__Alternatives_1)
{ after(grammarAccess.getClearAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clear__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clear__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClearAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getClearAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Verify__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__0__Impl
	rule__Verify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }

	'verify(' 

{ after(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__1__Impl
	rule__Verify__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getAlternatives_1()); }
(rule__Verify__Alternatives_1)
{ after(grammarAccess.getVerifyAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__2__Impl
	rule__Verify__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getValueKeyword_2()); }

	', value=' 

{ after(grammarAccess.getVerifyAccess().getValueKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__3__Impl
	rule__Verify__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getSTRINGTerminalRuleCall_3()); }
	RULE_STRING
{ after(grammarAccess.getVerifyAccess().getSTRINGTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getVerifyAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Exist__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exist__Group__0__Impl
	rule__Exist__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exist__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistAccess().getExistKeyword_0()); }

	'exist(' 

{ after(grammarAccess.getExistAccess().getExistKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exist__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exist__Group__1__Impl
	rule__Exist__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exist__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistAccess().getElementParserRuleCall_1()); }
	ruleElement
{ after(grammarAccess.getExistAccess().getElementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exist__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exist__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exist__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getExistAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GoTo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoTo__Group__0__Impl
	rule__GoTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getUrlKeyword_0()); }

	'url=' 

{ after(grammarAccess.getGoToAccess().getUrlKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoTo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoTo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getAlternatives_1()); }
(rule__GoTo__Alternatives_1)
{ after(grammarAccess.getGoToAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableString__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableString__Group__0__Impl
	rule__VariableString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableString__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStringAccess().getVarKeyword_0()); }

	'var ' 

{ after(grammarAccess.getVariableStringAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableString__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableString__Group__1__Impl
	rule__VariableString__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableString__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStringAccess().getNameAssignment_1()); }
(rule__VariableString__NameAssignment_1)
{ after(grammarAccess.getVariableStringAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableString__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableString__Group__2__Impl
	rule__VariableString__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableString__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStringAccess().getSpaceEqualsSignSpaceKeyword_2()); }

	' = ' 

{ after(grammarAccess.getVariableStringAccess().getSpaceEqualsSignSpaceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableString__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableString__Group__3__Impl
	rule__VariableString__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableString__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStringAccess().getSTRINGTerminalRuleCall_3()); }
	RULE_STRING
{ after(grammarAccess.getVariableStringAccess().getSTRINGTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableString__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableString__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableString__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStringAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableStringAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableUrl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableUrl__Group__0__Impl
	rule__VariableUrl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUrl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableUrlAccess().getVarKeyword_0()); }

	'var ' 

{ after(grammarAccess.getVariableUrlAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableUrl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableUrl__Group__1__Impl
	rule__VariableUrl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUrl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableUrlAccess().getNameAssignment_1()); }
(rule__VariableUrl__NameAssignment_1)
{ after(grammarAccess.getVariableUrlAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableUrl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableUrl__Group__2__Impl
	rule__VariableUrl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUrl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableUrlAccess().getSpaceEqualsSignSpaceKeyword_2()); }

	' = ' 

{ after(grammarAccess.getVariableUrlAccess().getSpaceEqualsSignSpaceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableUrl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableUrl__Group__3__Impl
	rule__VariableUrl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUrl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableUrlAccess().getURLTerminalRuleCall_3()); }
	RULE_URL
{ after(grammarAccess.getVariableUrlAccess().getURLTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableUrl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableUrl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUrl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableUrlAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableUrlAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableList__Group__0__Impl
	rule__VariableList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getVarKeyword_0()); }

	'var ' 

{ after(grammarAccess.getVariableListAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableList__Group__1__Impl
	rule__VariableList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getNameAssignment_1()); }
(rule__VariableList__NameAssignment_1)
{ after(grammarAccess.getVariableListAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableList__Group__2__Impl
	rule__VariableList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getSpaceEqualsSignSpaceKeyword_2()); }

	' = ' 

{ after(grammarAccess.getVariableListAccess().getSpaceEqualsSignSpaceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableList__Group__3__Impl
	rule__VariableList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getValueAssignment_3()); }
(rule__VariableList__ValueAssignment_3)
{ after(grammarAccess.getVariableListAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableList__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableList__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableListAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Checkbox__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Checkbox__Group__0__Impl
	rule__Checkbox__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkbox__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckboxAccess().getCheckboxKeyword_0()); }

	'checkbox ' 

{ after(grammarAccess.getCheckboxAccess().getCheckboxKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Checkbox__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Checkbox__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkbox__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckboxAccess().getAlternatives_1()); }
(rule__Checkbox__Alternatives_1)
{ after(grammarAccess.getCheckboxAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Link__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group__0__Impl
	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getLinkKeyword_0()); }

	'link ' 

{ after(grammarAccess.getLinkAccess().getLinkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getAlternatives_1()); }
(rule__Link__Alternatives_1)
{ after(grammarAccess.getLinkAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Button__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Button__Group__0__Impl
	rule__Button__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getButtonKeyword_0()); }

	'button ' 

{ after(grammarAccess.getButtonAccess().getButtonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Button__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Button__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Button__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getButtonAccess().getAlternatives_1()); }
(rule__Button__Alternatives_1)
{ after(grammarAccess.getButtonAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Image__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Image__Group__0__Impl
	rule__Image__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageAccess().getImageKeyword_0()); }

	'image ' 

{ after(grammarAccess.getImageAccess().getImageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Image__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Image__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Image__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImageAccess().getAlternatives_1()); }
(rule__Image__Alternatives_1)
{ after(grammarAccess.getImageAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TextField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextField__Group__0__Impl
	rule__TextField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextFieldAccess().getTextFieldKeyword_0()); }

	'textField ' 

{ after(grammarAccess.getTextFieldAccess().getTextFieldKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TextField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TextField__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextFieldAccess().getAlternatives_1()); }
(rule__TextField__Alternatives_1)
{ after(grammarAccess.getTextFieldAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__MainAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainMainParserRuleCall_0_0()); }
	ruleMain{ after(grammarAccess.getModelAccess().getMainMainParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Main__ActionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getActionsActionParserRuleCall_0_0()); }
	ruleAction{ after(grammarAccess.getMainAccess().getActionsActionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Main__ActionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getActionActionParserRuleCall_1_1_0()); }
	ruleAction{ after(grammarAccess.getMainAccess().getActionActionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubRoutineCall__IdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubRoutineCallAccess().getIdSubRoutineCrossReference_0()); }
(
{ before(grammarAccess.getSubRoutineCallAccess().getIdSubRoutineIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getSubRoutineCallAccess().getIdSubRoutineIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getSubRoutineCallAccess().getIdSubRoutineCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ElementAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElementElementParserRuleCall_1_0()); }
	ruleElement{ after(grammarAccess.getListAccess().getElementElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ElementAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElementElementParserRuleCall_2_1_0()); }
	ruleElement{ after(grammarAccess.getListAccess().getElementElementParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableString__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStringAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getVariableStringAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableUrl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableUrlAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getVariableUrlAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getVariableListAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableList__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableListAccess().getValueListParserRuleCall_3_0()); }
	ruleList{ after(grammarAccess.getVariableListAccess().getValueListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_URL : ('a'..'z')+ '://' (('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+|('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')* ('.' ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)*) (':' ('0'..'9')+)? ('/' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'~'|'+'|'.'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)* ('?' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+ ('+' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+)*)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


