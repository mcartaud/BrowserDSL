/*
* generated by Xtext
*/
package org.xtext.mda.project.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.mda.project.services.BrowserDSLGrammarAccess;

public class BrowserDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private BrowserDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser createParser() {
		org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser result = new org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getClickableElementAccess().getAlternatives(), "rule__ClickableElement__Alternatives");
					put(grammarAccess.getClearAccess().getAlternatives_1(), "rule__Clear__Alternatives_1");
					put(grammarAccess.getVerifyAccess().getAlternatives_1(), "rule__Verify__Alternatives_1");
					put(grammarAccess.getGoToAccess().getAlternatives_1(), "rule__GoTo__Alternatives_1");
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getCheckboxAccess().getAlternatives_1(), "rule__Checkbox__Alternatives_1");
					put(grammarAccess.getLinkAccess().getAlternatives_1(), "rule__Link__Alternatives_1");
					put(grammarAccess.getButtonAccess().getAlternatives_1(), "rule__Button__Alternatives_1");
					put(grammarAccess.getImageAccess().getAlternatives_1(), "rule__Image__Alternatives_1");
					put(grammarAccess.getTextFieldAccess().getAlternatives_1(), "rule__TextField__Alternatives_1");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getSubRoutineAccess().getGroup(), "rule__SubRoutine__Group__0");
					put(grammarAccess.getSubRoutineAccess().getGroup_3(), "rule__SubRoutine__Group_3__0");
					put(grammarAccess.getSubRoutineAccess().getGroup_7(), "rule__SubRoutine__Group_7__0");
					put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
					put(grammarAccess.getMainAccess().getGroup_1(), "rule__Main__Group_1__0");
					put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
					put(grammarAccess.getListAccess().getGroup_2(), "rule__List__Group_2__0");
					put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
					put(grammarAccess.getFillAccess().getGroup(), "rule__Fill__Group__0");
					put(grammarAccess.getClearAccess().getGroup(), "rule__Clear__Group__0");
					put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
					put(grammarAccess.getExistAccess().getGroup(), "rule__Exist__Group__0");
					put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
					put(grammarAccess.getVariableStringAccess().getGroup(), "rule__VariableString__Group__0");
					put(grammarAccess.getVariableUrlAccess().getGroup(), "rule__VariableUrl__Group__0");
					put(grammarAccess.getVariableListAccess().getGroup(), "rule__VariableList__Group__0");
					put(grammarAccess.getCheckboxAccess().getGroup(), "rule__Checkbox__Group__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
					put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
					put(grammarAccess.getTextFieldAccess().getGroup(), "rule__TextField__Group__0");
					put(grammarAccess.getModelAccess().getMainAssignment_0(), "rule__Model__MainAssignment_0");
					put(grammarAccess.getSubRoutineAccess().getNameAssignment_1(), "rule__SubRoutine__NameAssignment_1");
					put(grammarAccess.getSubRoutineAccess().getActionAssignment_6(), "rule__SubRoutine__ActionAssignment_6");
					put(grammarAccess.getSubRoutineAccess().getActionAssignment_7_1(), "rule__SubRoutine__ActionAssignment_7_1");
					put(grammarAccess.getMainAccess().getActionsAssignment_0(), "rule__Main__ActionsAssignment_0");
					put(grammarAccess.getMainAccess().getActionAssignment_1_1(), "rule__Main__ActionAssignment_1_1");
					put(grammarAccess.getSubRoutineCallAccess().getIdAssignment(), "rule__SubRoutineCall__IdAssignment");
					put(grammarAccess.getListAccess().getElementAssignment_1(), "rule__List__ElementAssignment_1");
					put(grammarAccess.getListAccess().getElementAssignment_2_1(), "rule__List__ElementAssignment_2_1");
					put(grammarAccess.getVariableStringAccess().getNameAssignment_1(), "rule__VariableString__NameAssignment_1");
					put(grammarAccess.getVariableUrlAccess().getNameAssignment_1(), "rule__VariableUrl__NameAssignment_1");
					put(grammarAccess.getVariableListAccess().getNameAssignment_1(), "rule__VariableList__NameAssignment_1");
					put(grammarAccess.getVariableListAccess().getValueAssignment_3(), "rule__VariableList__ValueAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser typedParser = (org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BrowserDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BrowserDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
