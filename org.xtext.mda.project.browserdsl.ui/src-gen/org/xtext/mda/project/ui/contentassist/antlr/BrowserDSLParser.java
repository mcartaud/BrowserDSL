/*
* generated by Xtext
*/
package org.xtext.mda.project.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.mda.project.services.BrowserDSLGrammarAccess;

public class BrowserDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private BrowserDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser createParser() {
		org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser result = new org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getHeadAccess().getAlternatives(), "rule__Head__Alternatives");
					put(grammarAccess.getFunctionCallAccess().getAlternatives(), "rule__FunctionCall__Alternatives");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives_1(), "rule__Condition__Alternatives_1");
					put(grammarAccess.getActionInstructionAccess().getAlternatives(), "rule__ActionInstruction__Alternatives");
					put(grammarAccess.getDeclarationAccess().getValueAlternatives_3_0(), "rule__Declaration__ValueAlternatives_3_0");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getBinarieExpressionAccess().getAlternatives_0(), "rule__BinarieExpression__Alternatives_0");
					put(grammarAccess.getActionExpressionAccess().getAlternatives(), "rule__ActionExpression__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getClickableElementAccess().getAlternatives(), "rule__ClickableElement__Alternatives");
					put(grammarAccess.getCheckboxAccess().getValueAlternatives_1_0(), "rule__Checkbox__ValueAlternatives_1_0");
					put(grammarAccess.getLinkAccess().getValueAlternatives_1_0(), "rule__Link__ValueAlternatives_1_0");
					put(grammarAccess.getButtonAccess().getValueAlternatives_1_0(), "rule__Button__ValueAlternatives_1_0");
					put(grammarAccess.getImageAccess().getValueAlternatives_1_0(), "rule__Image__ValueAlternatives_1_0");
					put(grammarAccess.getTextFieldAccess().getValueAlternatives_1_0(), "rule__TextField__ValueAlternatives_1_0");
					put(grammarAccess.getClickAccess().getElementAlternatives_1_0(), "rule__Click__ElementAlternatives_1_0");
					put(grammarAccess.getCheckAccess().getElementAlternatives_1_0(), "rule__Check__ElementAlternatives_1_0");
					put(grammarAccess.getFillAccess().getElementAlternatives_1_0(), "rule__Fill__ElementAlternatives_1_0");
					put(grammarAccess.getClearAccess().getElementAlternatives_1_0(), "rule__Clear__ElementAlternatives_1_0");
					put(grammarAccess.getVerifyAccess().getElementAlternatives_1_0(), "rule__Verify__ElementAlternatives_1_0");
					put(grammarAccess.getExistAccess().getElementAlternatives_1_0(), "rule__Exist__ElementAlternatives_1_0");
					put(grammarAccess.getOpenBrowserAccess().getAlternatives(), "rule__OpenBrowser__Alternatives");
					put(grammarAccess.getTypeElementAccess().getAlternatives(), "rule__TypeElement__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getSubroutineAccess().getGroup(), "rule__Subroutine__Group__0");
					put(grammarAccess.getHeadAccess().getGroup_0(), "rule__Head__Group_0__0");
					put(grammarAccess.getHeadAccess().getGroup_1(), "rule__Head__Group_1__0");
					put(grammarAccess.getHeadAccess().getGroup_1_3(), "rule__Head__Group_1_3__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_0(), "rule__FunctionCall__Group_0__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_1(), "rule__FunctionCall__Group_1__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_1_3(), "rule__FunctionCall__Group_1_3__0");
					put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
					put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getConditionAccess().getGroup_7(), "rule__Condition__Group_7__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getAssignationAccess().getGroup(), "rule__Assignation__Group__0");
					put(grammarAccess.getNotEpressionAccess().getGroup(), "rule__NotEpression__Group__0");
					put(grammarAccess.getBinarieExpressionAccess().getGroup(), "rule__BinarieExpression__Group__0");
					put(grammarAccess.getCheckboxAccess().getGroup(), "rule__Checkbox__Group__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
					put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
					put(grammarAccess.getTextFieldAccess().getGroup(), "rule__TextField__Group__0");
					put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
					put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
					put(grammarAccess.getCheckAccess().getGroup(), "rule__Check__Group__0");
					put(grammarAccess.getFillAccess().getGroup(), "rule__Fill__Group__0");
					put(grammarAccess.getClearAccess().getGroup(), "rule__Clear__Group__0");
					put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
					put(grammarAccess.getExistAccess().getGroup(), "rule__Exist__Group__0");
					put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
					put(grammarAccess.getProgramAccess().getBrowserAssignment_1(), "rule__Program__BrowserAssignment_1");
					put(grammarAccess.getProgramAccess().getSubroutinesAssignment_3(), "rule__Program__SubroutinesAssignment_3");
					put(grammarAccess.getProgramAccess().getMainAssignment_4(), "rule__Program__MainAssignment_4");
					put(grammarAccess.getSubroutineAccess().getHeadAssignment_1(), "rule__Subroutine__HeadAssignment_1");
					put(grammarAccess.getSubroutineAccess().getBodyAssignment_2(), "rule__Subroutine__BodyAssignment_2");
					put(grammarAccess.getHeadAccess().getNameAssignment_0_0(), "rule__Head__NameAssignment_0_0");
					put(grammarAccess.getHeadAccess().getNameAssignment_1_0(), "rule__Head__NameAssignment_1_0");
					put(grammarAccess.getHeadAccess().getNameParametersAssignment_1_2(), "rule__Head__NameParametersAssignment_1_2");
					put(grammarAccess.getHeadAccess().getNameParametersAssignment_1_3_1(), "rule__Head__NameParametersAssignment_1_3_1");
					put(grammarAccess.getFunctionReferenceAccess().getFunctionNameAssignment(), "rule__FunctionReference__FunctionNameAssignment");
					put(grammarAccess.getVariableReferenceAccess().getVarIDAssignment(), "rule__VariableReference__VarIDAssignment");
					put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0_0(), "rule__FunctionCall__FunctionAssignment_0_0");
					put(grammarAccess.getFunctionCallAccess().getFunctionAssignment_1_0(), "rule__FunctionCall__FunctionAssignment_1_0");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_1_2(), "rule__FunctionCall__ParametersAssignment_1_2");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_1_3_1(), "rule__FunctionCall__ParametersAssignment_1_3_1");
					put(grammarAccess.getFunctionNameAccess().getNameAssignment(), "rule__FunctionName__NameAssignment");
					put(grammarAccess.getMainAccess().getBodyAssignment_1(), "rule__Main__BodyAssignment_1");
					put(grammarAccess.getBodyAccess().getInstructionsAssignment_1(), "rule__Body__InstructionsAssignment_1");
					put(grammarAccess.getBodyAccess().getInstructionsAssignment_2(), "rule__Body__InstructionsAssignment_2");
					put(grammarAccess.getConditionAccess().getExpressionAssignment_3(), "rule__Condition__ExpressionAssignment_3");
					put(grammarAccess.getConditionAccess().getInstructionsIfAssignment_6(), "rule__Condition__InstructionsIfAssignment_6");
					put(grammarAccess.getConditionAccess().getInstructionsElseAssignment_7_1(), "rule__Condition__InstructionsElseAssignment_7_1");
					put(grammarAccess.getWhileAccess().getExpressionAssignment_1(), "rule__While__ExpressionAssignment_1");
					put(grammarAccess.getWhileAccess().getInstructionsAssignment_3(), "rule__While__InstructionsAssignment_3");
					put(grammarAccess.getVariableNameAccess().getNameAssignment(), "rule__VariableName__NameAssignment");
					put(grammarAccess.getDeclarationAccess().getVariableAssignment_1(), "rule__Declaration__VariableAssignment_1");
					put(grammarAccess.getDeclarationAccess().getValueAssignment_3(), "rule__Declaration__ValueAssignment_3");
					put(grammarAccess.getAssignationAccess().getVariableAssignment_0(), "rule__Assignation__VariableAssignment_0");
					put(grammarAccess.getAssignationAccess().getValueAssignment_2(), "rule__Assignation__ValueAssignment_2");
					put(grammarAccess.getNotEpressionAccess().getExpAssignment_1(), "rule__NotEpression__ExpAssignment_1");
					put(grammarAccess.getBinarieExpressionAccess().getLeftExpressionAssignment_1(), "rule__BinarieExpression__LeftExpressionAssignment_1");
					put(grammarAccess.getBinarieExpressionAccess().getRightExpressionAssignment_2(), "rule__BinarieExpression__RightExpressionAssignment_2");
					put(grammarAccess.getCheckboxAccess().getValueAssignment_1(), "rule__Checkbox__ValueAssignment_1");
					put(grammarAccess.getLinkAccess().getValueAssignment_1(), "rule__Link__ValueAssignment_1");
					put(grammarAccess.getButtonAccess().getValueAssignment_1(), "rule__Button__ValueAssignment_1");
					put(grammarAccess.getImageAccess().getValueAssignment_1(), "rule__Image__ValueAssignment_1");
					put(grammarAccess.getTextFieldAccess().getValueAssignment_1(), "rule__TextField__ValueAssignment_1");
					put(grammarAccess.getSelectAccess().getValueAssignment_1(), "rule__Select__ValueAssignment_1");
					put(grammarAccess.getClickAccess().getElementAssignment_1(), "rule__Click__ElementAssignment_1");
					put(grammarAccess.getCheckAccess().getElementAssignment_1(), "rule__Check__ElementAssignment_1");
					put(grammarAccess.getFillAccess().getElementAssignment_1(), "rule__Fill__ElementAssignment_1");
					put(grammarAccess.getFillAccess().getValueAssignment_3(), "rule__Fill__ValueAssignment_3");
					put(grammarAccess.getClearAccess().getElementAssignment_1(), "rule__Clear__ElementAssignment_1");
					put(grammarAccess.getVerifyAccess().getElementAssignment_1(), "rule__Verify__ElementAssignment_1");
					put(grammarAccess.getVerifyAccess().getValueAssignment_3(), "rule__Verify__ValueAssignment_3");
					put(grammarAccess.getExistAccess().getElementAssignment_1(), "rule__Exist__ElementAssignment_1");
					put(grammarAccess.getGoToAccess().getUrlAssignment_1(), "rule__GoTo__UrlAssignment_1");
					put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser typedParser = (org.xtext.mda.project.ui.contentassist.antlr.internal.InternalBrowserDSLParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BrowserDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BrowserDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
