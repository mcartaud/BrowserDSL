/*
* generated by Xtext
*/
grammar InternalBrowserDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.mda.project.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.mda.project.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mda.project.services.BrowserDSLGrammarAccess;

}

@parser::members {

 	private BrowserDSLGrammarAccess grammarAccess;
 	
    public InternalBrowserDSLParser(TokenStream input, BrowserDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected BrowserDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMainMainParserRuleCall_0_0()); 
	    }
		lv_main_0_0=ruleMain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"main",
        		lv_main_0_0, 
        		"Main");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getSemicolonKeyword_1());
    }
)
;







// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getActionsActionParserRuleCall_0_0()); 
	    }
		lv_actions_0_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_0_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getActionActionParserRuleCall_1_1_0()); 
	    }
		lv_action_2_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"action",
        		lv_action_2_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAccess().getClickParserRuleCall_0()); 
    }
    this_Click_0=ruleClick
    { 
        $current = $this_Click_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getFillParserRuleCall_1()); 
    }
    this_Fill_1=ruleFill
    { 
        $current = $this_Fill_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getClearParserRuleCall_2()); 
    }
    this_Clear_2=ruleClear
    { 
        $current = $this_Clear_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getVerifyParserRuleCall_3()); 
    }
    this_Verify_3=ruleVerify
    { 
        $current = $this_Verify_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getExistParserRuleCall_4()); 
    }
    this_Exist_4=ruleExist
    { 
        $current = $this_Exist_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getGoToParserRuleCall_5()); 
    }
    this_GoTo_5=ruleGoTo
    { 
        $current = $this_GoTo_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getSubRoutineCallParserRuleCall_6()); 
    }
    this_SubRoutineCall_6=ruleSubRoutineCall
    { 
        $current = $this_SubRoutineCall_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSubRoutineCall
entryRuleSubRoutineCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubRoutineCallRule()); }
	 iv_ruleSubRoutineCall=ruleSubRoutineCall 
	 { $current=$iv_ruleSubRoutineCall.current; } 
	 EOF 
;

// Rule SubRoutineCall
ruleSubRoutineCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubRoutineCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSubRoutineCallAccess().getIdSubRoutineCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getElementElementParserRuleCall_1_0()); 
	    }
		lv_element_1_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"element",
        		lv_element_1_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=', ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListAccess().getCommaSpaceKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getElementElementParserRuleCall_2_1_0()); 
	    }
		lv_element_3_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"element",
        		lv_element_3_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getListAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getClickableElementParserRuleCall_0()); 
    }
    this_ClickableElement_0=ruleClickableElement
    { 
        $current = $this_ClickableElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getFillableElementParserRuleCall_1()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getCheckableElementParserRuleCall_2()); 
    }
    this_CheckableElement_2=ruleCheckableElement
    { 
        $current = $this_CheckableElement_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClickableElement
entryRuleClickableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClickableElementRule()); }
	 iv_ruleClickableElement=ruleClickableElement 
	 { $current=$iv_ruleClickableElement.current; } 
	 EOF 
;

// Rule ClickableElement
ruleClickableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClickableElementAccess().getLinkParserRuleCall_0()); 
    }
    this_Link_0=ruleLink
    { 
        $current = $this_Link_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClickableElementAccess().getButtonParserRuleCall_1()); 
    }
    this_Button_1=ruleButton
    { 
        $current = $this_Button_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClickableElementAccess().getImageParserRuleCall_2()); 
    }
    this_Image_2=ruleImage
    { 
        $current = $this_Image_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFillableElement
entryRuleFillableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFillableElementRule()); }
	 iv_ruleFillableElement=ruleFillableElement 
	 { $current=$iv_ruleFillableElement.current; } 
	 EOF 
;

// Rule FillableElement
ruleFillableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFillableElementAccess().getTextFieldParserRuleCall()); 
    }
    this_TextField_0=ruleTextField
    { 
        $current = $this_TextField_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCheckableElement
entryRuleCheckableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckableElementRule()); }
	 iv_ruleCheckableElement=ruleCheckableElement 
	 { $current=$iv_ruleCheckableElement.current; } 
	 EOF 
;

// Rule CheckableElement
ruleCheckableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCheckableElementAccess().getCheckboxParserRuleCall()); 
    }
    this_Checkbox_0=ruleCheckbox
    { 
        $current = $this_Checkbox_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	 iv_ruleClick=ruleClick 
	 { $current=$iv_ruleClick.current; } 
	 EOF 
;

// Rule Click
ruleClick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='click(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getClickAccess().getClickableElementParserRuleCall_1()); 
    }
    this_ClickableElement_1=ruleClickableElement
    { 
        $current = $this_ClickableElement_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClickAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleFill
entryRuleFill returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFillRule()); }
	 iv_ruleFill=ruleFill 
	 { $current=$iv_ruleFill.current; } 
	 EOF 
;

// Rule Fill
ruleFill returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fill(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFillAccess().getFillKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getFillAccess().getFillableElementParserRuleCall_1()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=', value=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFillAccess().getValueKeyword_2());
    }
this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getFillAccess().getSTRINGTerminalRuleCall_3()); 
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFillAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleClear
entryRuleClear returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClearRule()); }
	 iv_ruleClear=ruleClear 
	 { $current=$iv_ruleClear.current; } 
	 EOF 
;

// Rule Clear
ruleClear returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='clear(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClearAccess().getClearKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getClearAccess().getFillableElementParserRuleCall_1_0()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClearAccess().getCheckableElementParserRuleCall_1_1()); 
    }
    this_CheckableElement_2=ruleCheckableElement
    { 
        $current = $this_CheckableElement_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClearAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	 iv_ruleVerify=ruleVerify 
	 { $current=$iv_ruleVerify.current; } 
	 EOF 
;

// Rule Verify
ruleVerify returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='verify(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getVerifyAccess().getFillableElementParserRuleCall_1_0()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVerifyAccess().getCheckableElementParserRuleCall_1_1()); 
    }
    this_CheckableElement_2=ruleCheckableElement
    { 
        $current = $this_CheckableElement_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=', value=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVerifyAccess().getValueKeyword_2());
    }
this_STRING_4=RULE_STRING
    { 
    newLeafNode(this_STRING_4, grammarAccess.getVerifyAccess().getSTRINGTerminalRuleCall_3()); 
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVerifyAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleExist
entryRuleExist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistRule()); }
	 iv_ruleExist=ruleExist 
	 { $current=$iv_ruleExist.current; } 
	 EOF 
;

// Rule Exist
ruleExist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exist(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExistAccess().getExistKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExistAccess().getElementParserRuleCall_1()); 
    }
    this_Element_1=ruleElement
    { 
        $current = $this_Element_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExistAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleGoTo
entryRuleGoTo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoToRule()); }
	 iv_ruleGoTo=ruleGoTo 
	 { $current=$iv_ruleGoTo.current; } 
	 EOF 
;

// Rule GoTo
ruleGoTo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='url=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGoToAccess().getUrlKeyword_0());
    }
(this_URL_1=RULE_URL
    { 
    newLeafNode(this_URL_1, grammarAccess.getGoToAccess().getURLTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getGoToAccess().getVariableUrlParserRuleCall_1_1()); 
    }
    this_VariableUrl_2=ruleVariableUrl
    { 
        $current = $this_VariableUrl_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getVariableListParserRuleCall_0()); 
    }
    this_VariableList_0=ruleVariableList
    { 
        $current = $this_VariableList_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getVariableStringParserRuleCall_1()); 
    }
    this_VariableString_1=ruleVariableString
    { 
        $current = $this_VariableString_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getVariableUrlParserRuleCall_2()); 
    }
    this_VariableUrl_2=ruleVariableUrl
    { 
        $current = $this_VariableUrl_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableString
entryRuleVariableString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableStringRule()); }
	 iv_ruleVariableString=ruleVariableString 
	 { $current=$iv_ruleVariableString.current; } 
	 EOF 
;

// Rule VariableString
ruleVariableString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableStringAccess().getVarKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableStringAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=' = ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableStringAccess().getSpaceEqualsSignSpaceKeyword_2());
    }
this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getVariableStringAccess().getSTRINGTerminalRuleCall_3()); 
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableStringAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariableUrl
entryRuleVariableUrl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableUrlRule()); }
	 iv_ruleVariableUrl=ruleVariableUrl 
	 { $current=$iv_ruleVariableUrl.current; } 
	 EOF 
;

// Rule VariableUrl
ruleVariableUrl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableUrlAccess().getVarKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableUrlAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableUrlRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=' = ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableUrlAccess().getSpaceEqualsSignSpaceKeyword_2());
    }
this_URL_3=RULE_URL
    { 
    newLeafNode(this_URL_3, grammarAccess.getVariableUrlAccess().getURLTerminalRuleCall_3()); 
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableUrlAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariableList
entryRuleVariableList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableListRule()); }
	 iv_ruleVariableList=ruleVariableList 
	 { $current=$iv_ruleVariableList.current; } 
	 EOF 
;

// Rule VariableList
ruleVariableList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableListAccess().getVarKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableListAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=' = ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableListAccess().getSpaceEqualsSignSpaceKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableListAccess().getValueListParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableListRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableListAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleCheckbox
entryRuleCheckbox returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckboxRule()); }
	 iv_ruleCheckbox=ruleCheckbox 
	 { $current=$iv_ruleCheckbox.current; } 
	 EOF 
;

// Rule Checkbox
ruleCheckbox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='checkbox ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheckboxAccess().getCheckboxKeyword_0());
    }
(this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getCheckboxAccess().getSTRINGTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCheckboxAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='link ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkAccess().getLinkKeyword_0());
    }
(this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getLinkAccess().getSTRINGTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLinkAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleButton
entryRuleButton returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getButtonRule()); }
	 iv_ruleButton=ruleButton 
	 { $current=$iv_ruleButton.current; } 
	 EOF 
;

// Rule Button
ruleButton returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='button ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getButtonAccess().getButtonKeyword_0());
    }
(this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getButtonAccess().getSTRINGTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getButtonAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleImage
entryRuleImage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImageRule()); }
	 iv_ruleImage=ruleImage 
	 { $current=$iv_ruleImage.current; } 
	 EOF 
;

// Rule Image
ruleImage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='image ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImageAccess().getImageKeyword_0());
    }
(this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getImageAccess().getSTRINGTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getImageAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleTextField
entryRuleTextField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextFieldRule()); }
	 iv_ruleTextField=ruleTextField 
	 { $current=$iv_ruleTextField.current; } 
	 EOF 
;

// Rule TextField
ruleTextField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='textField ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextFieldAccess().getTextFieldKeyword_0());
    }
(this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getTextFieldAccess().getSTRINGTerminalRuleCall_1_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTextFieldAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





RULE_URL : ('a'..'z')+ '://' (('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+|('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')* ('.' ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)*) (':' ('0'..'9')+)? ('/' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'~'|'+'|'.'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)* ('?' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+ ('+' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+)*)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


