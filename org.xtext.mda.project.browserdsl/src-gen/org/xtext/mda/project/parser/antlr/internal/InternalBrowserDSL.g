/*
* generated by Xtext
*/
grammar InternalBrowserDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.mda.project.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.mda.project.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mda.project.services.BrowserDSLGrammarAccess;

}

@parser::members {

 	private BrowserDSLGrammarAccess grammarAccess;
 	
    public InternalBrowserDSLParser(TokenStream input, BrowserDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected BrowserDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getSubSubroutineParserRuleCall_0_0()); 
	    }
		lv_sub_0_0=ruleSubroutine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"sub",
        		lv_sub_0_0, 
        		"Subroutine");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getMainMainParserRuleCall_1_0()); 
	    }
		lv_main_1_0=ruleMain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"main",
        		lv_main_1_0, 
        		"Main");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSubroutine
entryRuleSubroutine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubroutineRule()); }
	 iv_ruleSubroutine=ruleSubroutine 
	 { $current=$iv_ruleSubroutine.current; } 
	 EOF 
;

// Rule Subroutine
ruleSubroutine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sub' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubroutineAccess().getSubKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubroutineAccess().getHeadHeadParserRuleCall_1_0()); 
	    }
		lv_head_1_0=ruleHead		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubroutineRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_1_0, 
        		"Head");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubroutineAccess().getBodyBodyParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubroutineRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Body");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHead
entryRuleHead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeadRule()); }
	 iv_ruleHead=ruleHead 
	 { $current=$iv_ruleHead.current; } 
	 EOF 
;

// Rule Head
ruleHead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_0_0_0()); 
	    }
		lv_name_0_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeadRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FunctionName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='()' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHeadAccess().getLeftParenthesisRightParenthesisKeyword_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getHeadAccess().getNameFunctionNameParserRuleCall_1_0_0()); 
	    }
		lv_name_2_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeadRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"FunctionName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(var' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHeadAccess().getVarKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeadAccess().getVarIdVariableNameParserRuleCall_1_2_0()); 
	    }
		lv_varId_4_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeadRule());
	        }
       		add(
       			$current, 
       			"varId",
        		lv_varId_4_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=', var' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHeadAccess().getVarKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeadAccess().getVarIdVariableNameParserRuleCall_1_3_1_0()); 
	    }
		lv_varId_6_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeadRule());
	        }
       		add(
       			$current, 
       			"varId",
        		lv_varId_6_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHeadAccess().getRightParenthesisKeyword_1_4());
    }
))
;





// Entry rule entryRuleFunctionReference
entryRuleFunctionReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionReferenceRule()); }
	 iv_ruleFunctionReference=ruleFunctionReference 
	 { $current=$iv_ruleFunctionReference.current; } 
	 EOF 
;

// Rule FunctionReference
ruleFunctionReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFunctionReferenceAccess().getFunctionNameFunctionNameCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableReferenceAccess().getVarIDVariableNameCrossReference_0()); 
	}

)
)
;







// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	 iv_ruleFunctionName=ruleFunctionName 
	 { $current=$iv_ruleFunctionName.current; } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionNameAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='main' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainAccess().getMainKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getMainAccess().getBodyParserRuleCall_1()); 
    }
    this_Body_1=ruleBody
    { 
        $current = $this_Body_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getInstructionsInstructionParserRuleCall_0_0()); 
	    }
		lv_instructions_0_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_0_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='; ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBodyAccess().getSemicolonSpaceKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getInstructionsInstructionParserRuleCall_1_1_0()); 
	    }
		lv_instructions_2_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_2_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBodyAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getDecDeclarationParserRuleCall_0_0()); 
	    }
		lv_dec_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getCondConditionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getLoopLoopParserRuleCall_2_0()); 
	    }
		lv_loop_2_0=ruleLoop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"loop",
        		lv_loop_2_0, 
        		"Loop");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getActActionInstructionParserRuleCall_3_0()); 
	    }
		lv_act_3_0=ruleActionInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"act",
        		lv_act_3_0, 
        		"ActionInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getAssAssignationParserRuleCall_4_0()); 
	    }
		lv_ass_4_0=ruleAssignation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"ass",
        		lv_ass_4_0, 
        		"Assignation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getIfKeyword_0());
    }
(	otherlv_1='all' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getAllKeyword_1_0());
    }

    |	otherlv_2='any' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getAnyKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getExpExpressionParserRuleCall_2_0()); 
	    }
		lv_exp_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getThenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getInsInstructionParserRuleCall_4_0()); 
	    }
		lv_ins_5_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		add(
       			$current, 
       			"ins",
        		lv_ins_5_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConditionAccess().getElseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getIns2InstructionParserRuleCall_6_0()); 
	    }
		lv_ins2_7_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		add(
       			$current, 
       			"ins2",
        		lv_ins2_7_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='endif' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConditionAccess().getEndifKeyword_7());
    }
)
;





// Entry rule entryRuleLoop
entryRuleLoop returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); } 
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current.getText(); }  
	 EOF 
;

// Rule Loop
ruleLoop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='toto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLoopAccess().getTotoKeyword()); 
    }

    ;





// Entry rule entryRuleActionInstruction
entryRuleActionInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionInstructionRule()); }
	 iv_ruleActionInstruction=ruleActionInstruction 
	 { $current=$iv_ruleActionInstruction.current; } 
	 EOF 
;

// Rule ActionInstruction
ruleActionInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionInstructionAccess().getActionClickParserRuleCall_0_0()); 
	    }
		lv_action_0_0=ruleClick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionInstructionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_0_0, 
        		"Click");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getActionInstructionAccess().getActionFillParserRuleCall_1_0()); 
	    }
		lv_action_1_0=ruleFill		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionInstructionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_1_0, 
        		"Fill");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getActionInstructionAccess().getActionClearParserRuleCall_2_0()); 
	    }
		lv_action_2_0=ruleClear		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionInstructionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_2_0, 
        		"Clear");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getActionInstructionAccess().getGoToParserRuleCall_3()); 
    }
ruleGoTo
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableName
entryRuleVariableName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableNameRule()); }
	 iv_ruleVariableName=ruleVariableName 
	 { $current=$iv_ruleVariableName.current; } 
	 EOF 
;

// Rule VariableName
ruleVariableName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableNameAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclarationAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getNameVariableNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleVariableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"VariableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getValExpressionParserRuleCall_3_0()); 
	    }
		lv_val_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssignation
entryRuleAssignation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignationRule()); }
	 iv_ruleAssignation=ruleAssignation 
	 { $current=$iv_ruleAssignation.current; } 
	 EOF 
;

// Rule Assignation
ruleAssignation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignationAccess().getVarVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignationRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignationAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getVarVariableParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getActActionExpressionParserRuleCall_2_0()); 
	    }
		lv_act_2_0=ruleActionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"act",
        		lv_act_2_0, 
        		"ActionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((	otherlv_3='==' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getEqualsSignEqualsSignKeyword_3_0_0());
    }

    |	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getGreaterThanSignKeyword_3_0_1());
    }

    |	otherlv_5='<' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getLessThanSignKeyword_3_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLeftExpressionParserRuleCall_3_1_0()); 
	    }
		lv_left_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_3_2_0()); 
	    }
		lv_right_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='!' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpressionAccess().getExclamationMarkKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpExpressionParserRuleCall_4_1_0()); 
	    }
		lv_exp_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getBoolKeyword_0()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_1()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getIntKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getVarVariableReferenceParserRuleCall_0()); 
	    }
		lv_var_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleActionExpression
entryRuleActionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionExpressionRule()); }
	 iv_ruleActionExpression=ruleActionExpression 
	 { $current=$iv_ruleActionExpression.current; } 
	 EOF 
;

// Rule ActionExpression
ruleActionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionExpressionAccess().getVerifyParserRuleCall_0()); 
    }
    this_Verify_0=ruleVerify
    { 
        $current = $this_Verify_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionExpressionAccess().getExistParserRuleCall_1()); 
    }
    this_Exist_1=ruleExist
    { 
        $current = $this_Exist_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getClickableElementParserRuleCall_0()); 
    }
    this_ClickableElement_0=ruleClickableElement
    { 
        $current = $this_ClickableElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getFillableElementParserRuleCall_1()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getCheckableElementParserRuleCall_2()); 
    }
    this_CheckableElement_2=ruleCheckableElement
    { 
        $current = $this_CheckableElement_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClickableElement
entryRuleClickableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClickableElementRule()); }
	 iv_ruleClickableElement=ruleClickableElement 
	 { $current=$iv_ruleClickableElement.current; } 
	 EOF 
;

// Rule ClickableElement
ruleClickableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClickableElementAccess().getLinkParserRuleCall_0()); 
    }
    this_Link_0=ruleLink
    { 
        $current = $this_Link_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClickableElementAccess().getButtonParserRuleCall_1()); 
    }
    this_Button_1=ruleButton
    { 
        $current = $this_Button_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClickableElementAccess().getImageParserRuleCall_2()); 
    }
    this_Image_2=ruleImage
    { 
        $current = $this_Image_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFillableElement
entryRuleFillableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFillableElementRule()); }
	 iv_ruleFillableElement=ruleFillableElement 
	 { $current=$iv_ruleFillableElement.current; } 
	 EOF 
;

// Rule FillableElement
ruleFillableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFillableElementAccess().getTextFieldParserRuleCall()); 
    }
    this_TextField_0=ruleTextField
    { 
        $current = $this_TextField_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCheckableElement
entryRuleCheckableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckableElementRule()); }
	 iv_ruleCheckableElement=ruleCheckableElement 
	 { $current=$iv_ruleCheckableElement.current; } 
	 EOF 
;

// Rule CheckableElement
ruleCheckableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCheckableElementAccess().getCheckboxParserRuleCall()); 
    }
    this_Checkbox_0=ruleCheckbox
    { 
        $current = $this_Checkbox_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCheckbox
entryRuleCheckbox returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckboxRule()); }
	 iv_ruleCheckbox=ruleCheckbox 
	 { $current=$iv_ruleCheckbox.current; } 
	 EOF 
;

// Rule Checkbox
ruleCheckbox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='checkbox' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheckboxAccess().getCheckboxKeyword_0());
    }
((
(
		lv_check_1_0=RULE_STRING
		{
			newLeafNode(lv_check_1_0, grammarAccess.getCheckboxAccess().getCheckSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheckboxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"check",
        		lv_check_1_0, 
        		"STRING");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getCheckboxAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='link' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkAccess().getLinkKeyword_0());
    }
((
(
		lv_link_1_0=RULE_STRING
		{
			newLeafNode(lv_link_1_0, grammarAccess.getLinkAccess().getLinkSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"link",
        		lv_link_1_0, 
        		"STRING");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getLinkAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleButton
entryRuleButton returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getButtonRule()); }
	 iv_ruleButton=ruleButton 
	 { $current=$iv_ruleButton.current; } 
	 EOF 
;

// Rule Button
ruleButton returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='button' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getButtonAccess().getButtonKeyword_0());
    }
((
(
		lv_but_1_0=RULE_STRING
		{
			newLeafNode(lv_but_1_0, grammarAccess.getButtonAccess().getButSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getButtonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"but",
        		lv_but_1_0, 
        		"STRING");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getButtonAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleImage
entryRuleImage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImageRule()); }
	 iv_ruleImage=ruleImage 
	 { $current=$iv_ruleImage.current; } 
	 EOF 
;

// Rule Image
ruleImage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='image' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImageAccess().getImageKeyword_0());
    }
((
(
		lv_img_1_0=RULE_STRING
		{
			newLeafNode(lv_img_1_0, grammarAccess.getImageAccess().getImgSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"img",
        		lv_img_1_0, 
        		"STRING");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getImageAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleTextField
entryRuleTextField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextFieldRule()); }
	 iv_ruleTextField=ruleTextField 
	 { $current=$iv_ruleTextField.current; } 
	 EOF 
;

// Rule TextField
ruleTextField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='textField' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextFieldAccess().getTextFieldKeyword_0());
    }
((
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getTextFieldAccess().getTextSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"STRING");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getTextFieldAccess().getVariableParserRuleCall_1_1()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	 iv_ruleClick=ruleClick 
	 { $current=$iv_ruleClick.current; } 
	 EOF 
;

// Rule Click
ruleClick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='click(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getClickAccess().getClickableElementParserRuleCall_1()); 
    }
    this_ClickableElement_1=ruleClickableElement
    { 
        $current = $this_ClickableElement_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClickAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleFill
entryRuleFill returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFillRule()); }
	 iv_ruleFill=ruleFill 
	 { $current=$iv_ruleFill.current; } 
	 EOF 
;

// Rule Fill
ruleFill returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fill(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFillAccess().getFillKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getFillAccess().getFillableElementParserRuleCall_1()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=', value=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFillAccess().getValueKeyword_2());
    }
this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getFillAccess().getSTRINGTerminalRuleCall_3()); 
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFillAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleClear
entryRuleClear returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClearRule()); }
	 iv_ruleClear=ruleClear 
	 { $current=$iv_ruleClear.current; } 
	 EOF 
;

// Rule Clear
ruleClear returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='clear(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClearAccess().getClearKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getClearAccess().getFillableElementParserRuleCall_1_0()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClearAccess().getCheckableElementParserRuleCall_1_1()); 
    }
    this_CheckableElement_2=ruleCheckableElement
    { 
        $current = $this_CheckableElement_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClearAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	 iv_ruleVerify=ruleVerify 
	 { $current=$iv_ruleVerify.current; } 
	 EOF 
;

// Rule Verify
ruleVerify returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='verify(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getVerifyAccess().getFillableElementParserRuleCall_1_0()); 
    }
    this_FillableElement_1=ruleFillableElement
    { 
        $current = $this_FillableElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVerifyAccess().getCheckableElementParserRuleCall_1_1()); 
    }
    this_CheckableElement_2=ruleCheckableElement
    { 
        $current = $this_CheckableElement_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=', value=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVerifyAccess().getValueKeyword_2());
    }
this_STRING_4=RULE_STRING
    { 
    newLeafNode(this_STRING_4, grammarAccess.getVerifyAccess().getSTRINGTerminalRuleCall_3()); 
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVerifyAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleExist
entryRuleExist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistRule()); }
	 iv_ruleExist=ruleExist 
	 { $current=$iv_ruleExist.current; } 
	 EOF 
;

// Rule Exist
ruleExist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exist(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExistAccess().getExistKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExistAccess().getElementParserRuleCall_1()); 
    }
    this_Element_1=ruleElement
    { 
        $current = $this_Element_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExistAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleGoTo
entryRuleGoTo returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoToRule()); } 
	 iv_ruleGoTo=ruleGoTo 
	 { $current=$iv_ruleGoTo.current.getText(); }  
	 EOF 
;

// Rule GoTo
ruleGoTo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='url=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getGoToAccess().getUrlKeyword_0()); 
    }
    this_URL_1=RULE_URL    {
		$current.merge(this_URL_1);
    }

    { 
    newLeafNode(this_URL_1, grammarAccess.getGoToAccess().getURLTerminalRuleCall_1()); 
    }
)
    ;





RULE_URL : ('a'..'z')+ '://' (('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+|('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')* ('.' ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)*) (':' ('0'..'9')+)? ('/' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'~'|'+'|'.'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')*)* ('?' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+ ('+' ('a'..'z'|'A'..'Z'|'0'..'9'|'$'|'-'|'_'|'='|'&'|';'|'\\' ('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F')|'%' '0'..'9' '0'..'9')+)*)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


