/*
* generated by Xtext
*/
package org.xtext.mda.project.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BrowserDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrowserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserOpenBrowserEnumRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesDeclarationParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Assignment cSubroutinesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubroutinesSubroutineParserRuleCall_4_0 = (RuleCall)cSubroutinesAssignment_4.eContents().get(0);
		private final Assignment cMainAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMainMainParserRuleCall_5_0 = (RuleCall)cMainAssignment_5.eContents().get(0);
		
		//Program:
		//	"browser " browser=OpenBrowser ";" variables+=Declaration* subroutines+=Subroutine* main=Main;
		public ParserRule getRule() { return rule; }

		//"browser " browser=OpenBrowser ";" variables+=Declaration* subroutines+=Subroutine* main=Main
		public Group getGroup() { return cGroup; }

		//"browser "
		public Keyword getBrowserKeyword_0() { return cBrowserKeyword_0; }

		//browser=OpenBrowser
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }

		//OpenBrowser
		public RuleCall getBrowserOpenBrowserEnumRuleCall_1_0() { return cBrowserOpenBrowserEnumRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//variables+=Declaration*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//Declaration
		public RuleCall getVariablesDeclarationParserRuleCall_3_0() { return cVariablesDeclarationParserRuleCall_3_0; }

		//subroutines+=Subroutine*
		public Assignment getSubroutinesAssignment_4() { return cSubroutinesAssignment_4; }

		//Subroutine
		public RuleCall getSubroutinesSubroutineParserRuleCall_4_0() { return cSubroutinesSubroutineParserRuleCall_4_0; }

		//main=Main
		public Assignment getMainAssignment_5() { return cMainAssignment_5; }

		//Main
		public RuleCall getMainMainParserRuleCall_5_0() { return cMainMainParserRuleCall_5_0; }
	}

	public class SubroutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subroutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadHeadParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodySubBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Subroutine:
		//	"sub " head=Head body=SubBody;
		public ParserRule getRule() { return rule; }

		//"sub " head=Head body=SubBody
		public Group getGroup() { return cGroup; }

		//"sub "
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }

		//head=Head
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }

		//Head
		public RuleCall getHeadHeadParserRuleCall_1_0() { return cHeadHeadParserRuleCall_1_0; }

		//body=SubBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//SubBody
		public RuleCall getBodySubBodyParserRuleCall_2_0() { return cBodySubBodyParserRuleCall_2_0; }
	}

	public class SubBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInstructionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0_0 = (RuleCall)cInstructionsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubBody:
		//	"{" instructions+=Instruction ";" (instructions+=Instruction ";")* "}";
		public ParserRule getRule() { return rule; }

		//"{" instructions+=Instruction ";" (instructions+=Instruction ";")* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//(instructions+=Instruction ";")*
		public Group getGroup_3() { return cGroup_3; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_0() { return cInstructionsAssignment_3_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0_0() { return cInstructionsInstructionParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cVarKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameParametersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameParametersVariableNameParserRuleCall_1_2_0 = (RuleCall)cNameParametersAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cVarKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cNameParametersAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cNameParametersVariableNameParserRuleCall_1_3_1_0 = (RuleCall)cNameParametersAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Head:
		//	name=FunctionName "()" | name=FunctionName "(var " nameParameters+=VariableName (", var "
		//	nameParameters+=VariableName)* ")";
		public ParserRule getRule() { return rule; }

		//name=FunctionName "()" | name=FunctionName "(var " nameParameters+=VariableName (", var " nameParameters+=VariableName)*
		//")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=FunctionName "()"
		public Group getGroup_0() { return cGroup_0; }

		//name=FunctionName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_0_0_0() { return cNameFunctionNameParserRuleCall_0_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1() { return cLeftParenthesisRightParenthesisKeyword_0_1; }

		//name=FunctionName "(var " nameParameters+=VariableName (", var " nameParameters+=VariableName)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//name=FunctionName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_1_0_0() { return cNameFunctionNameParserRuleCall_1_0_0; }

		//"(var "
		public Keyword getVarKeyword_1_1() { return cVarKeyword_1_1; }

		//nameParameters+=VariableName
		public Assignment getNameParametersAssignment_1_2() { return cNameParametersAssignment_1_2; }

		//VariableName
		public RuleCall getNameParametersVariableNameParserRuleCall_1_2_0() { return cNameParametersVariableNameParserRuleCall_1_2_0; }

		//(", var " nameParameters+=VariableName)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//", var "
		public Keyword getVarKeyword_1_3_0() { return cVarKeyword_1_3_0; }

		//nameParameters+=VariableName
		public Assignment getNameParametersAssignment_1_3_1() { return cNameParametersAssignment_1_3_1; }

		//VariableName
		public RuleCall getNameParametersVariableNameParserRuleCall_1_3_1_0() { return cNameParametersVariableNameParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Main:
		//	"main" body=Body;
		public ParserRule getRule() { return rule; }

		//"main" body=Body
		public Group getGroup() { return cGroup; }

		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//body=Body
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_1_0() { return cBodyBodyParserRuleCall_1_0; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlGoToParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInstructionsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_5_0_0 = (RuleCall)cInstructionsAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Body:
		//	"{" url=GoTo ";" instructions+=Instruction ";" (instructions+=Instruction ";")* "}";
		public ParserRule getRule() { return rule; }

		//"{" url=GoTo ";" instructions+=Instruction ";" (instructions+=Instruction ";")* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//url=GoTo
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//GoTo
		public RuleCall getUrlGoToParserRuleCall_1_0() { return cUrlGoToParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//(instructions+=Instruction ";")*
		public Group getGroup_5() { return cGroup_5; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_5_0() { return cInstructionsAssignment_5_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_5_0_0() { return cInstructionsInstructionParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVarIDAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarIDVariableNameCrossReference_0 = (CrossReference)cVarIDAssignment.eContents().get(0);
		private final RuleCall cVarIDVariableNameIDTerminalRuleCall_0_1 = (RuleCall)cVarIDVariableNameCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//	varID=[VariableName];
		public ParserRule getRule() { return rule; }

		//varID=[VariableName]
		public Assignment getVarIDAssignment() { return cVarIDAssignment; }

		//[VariableName]
		public CrossReference getVarIDVariableNameCrossReference_0() { return cVarIDVariableNameCrossReference_0; }

		//ID
		public RuleCall getVarIDVariableNameIDTerminalRuleCall_0_1() { return cVarIDVariableNameIDTerminalRuleCall_0_1; }
	}

	public class FunctionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionReference");
		private final Assignment cFunctionNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFunctionNameFunctionNameCrossReference_0 = (CrossReference)cFunctionNameAssignment.eContents().get(0);
		private final RuleCall cFunctionNameFunctionNameIDTerminalRuleCall_0_1 = (RuleCall)cFunctionNameFunctionNameCrossReference_0.eContents().get(1);
		
		//FunctionReference:
		//	functionName=[FunctionName];
		public ParserRule getRule() { return rule; }

		//functionName=[FunctionName]
		public Assignment getFunctionNameAssignment() { return cFunctionNameAssignment; }

		//[FunctionName]
		public CrossReference getFunctionNameFunctionNameCrossReference_0() { return cFunctionNameFunctionNameCrossReference_0; }

		//ID
		public RuleCall getFunctionNameFunctionNameIDTerminalRuleCall_0_1() { return cFunctionNameFunctionNameIDTerminalRuleCall_0_1; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFunctionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFunctionFunctionReferenceParserRuleCall_0_0_0 = (RuleCall)cFunctionAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunctionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFunctionFunctionReferenceParserRuleCall_1_0_0 = (RuleCall)cFunctionAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParametersCallTypeParserRuleCall_1_2_0 = (RuleCall)cParametersAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaSpaceKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cParametersAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cParametersCallTypeParserRuleCall_1_3_1_0 = (RuleCall)cParametersAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//FunctionCall:
		//	function=FunctionReference "()" | function=FunctionReference "(" parameters+=CallType (", " parameters+=CallType)*
		//	")";
		public ParserRule getRule() { return rule; }

		//function=FunctionReference "()" | function=FunctionReference "(" parameters+=CallType (", " parameters+=CallType)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//function=FunctionReference "()"
		public Group getGroup_0() { return cGroup_0; }

		//function=FunctionReference
		public Assignment getFunctionAssignment_0_0() { return cFunctionAssignment_0_0; }

		//FunctionReference
		public RuleCall getFunctionFunctionReferenceParserRuleCall_0_0_0() { return cFunctionFunctionReferenceParserRuleCall_0_0_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1() { return cLeftParenthesisRightParenthesisKeyword_0_1; }

		//function=FunctionReference "(" parameters+=CallType (", " parameters+=CallType)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//function=FunctionReference
		public Assignment getFunctionAssignment_1_0() { return cFunctionAssignment_1_0; }

		//FunctionReference
		public RuleCall getFunctionFunctionReferenceParserRuleCall_1_0_0() { return cFunctionFunctionReferenceParserRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//parameters+=CallType
		public Assignment getParametersAssignment_1_2() { return cParametersAssignment_1_2; }

		//CallType
		public RuleCall getParametersCallTypeParserRuleCall_1_2_0() { return cParametersCallTypeParserRuleCall_1_2_0; }

		//(", " parameters+=CallType)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//", "
		public Keyword getCommaSpaceKeyword_1_3_0() { return cCommaSpaceKeyword_1_3_0; }

		//parameters+=CallType
		public Assignment getParametersAssignment_1_3_1() { return cParametersAssignment_1_3_1; }

		//CallType
		public RuleCall getParametersCallTypeParserRuleCall_1_3_1_0() { return cParametersCallTypeParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class CallTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValuesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CallType:
		//	Values | Variable;
		public ParserRule getRule() { return rule; }

		//Values | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Values
		public RuleCall getValuesParserRuleCall_0() { return cValuesParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final RuleCall cVariableReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Variable:
		//	VariableReference;
		public ParserRule getRule() { return rule; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall() { return cVariableReferenceParserRuleCall; }
	}

	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableName:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableNameParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cSpaceEqualsSignSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValuesParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Declaration:
		//	"var " variable=VariableName " = " value=Values ";";
		public ParserRule getRule() { return rule; }

		//"var " variable=VariableName " = " value=Values ";"
		public Group getGroup() { return cGroup; }

		//"var "
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//variable=VariableName
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableName
		public RuleCall getVariableVariableNameParserRuleCall_1_0() { return cVariableVariableNameParserRuleCall_1_0; }

		//" = "
		public Keyword getSpaceEqualsSignSpaceKeyword_2() { return cSpaceEqualsSignSpaceKeyword_2; }

		//value=Values
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Values
		public RuleCall getValueValuesParserRuleCall_3_0() { return cValueValuesParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckboxParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGoToParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFunctionCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Instruction:
		//	Link | Button | Image | TextField | Checkbox | GoTo | FunctionCall;
		public ParserRule getRule() { return rule; }

		//Link | Button | Image | TextField | Checkbox | GoTo | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Link
		public RuleCall getLinkParserRuleCall_0() { return cLinkParserRuleCall_0; }

		//Button
		public RuleCall getButtonParserRuleCall_1() { return cButtonParserRuleCall_1; }

		//Image
		public RuleCall getImageParserRuleCall_2() { return cImageParserRuleCall_2; }

		//TextField
		public RuleCall getTextFieldParserRuleCall_3() { return cTextFieldParserRuleCall_3; }

		//Checkbox
		public RuleCall getCheckboxParserRuleCall_4() { return cCheckboxParserRuleCall_4; }

		//GoTo
		public RuleCall getGoToParserRuleCall_5() { return cGoToParserRuleCall_5; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_6() { return cFunctionCallParserRuleCall_6; }
	}

	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlURLTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GoTo:
		//	"goTo(" url=URL ")";
		public ParserRule getRule() { return rule; }

		//"goTo(" url=URL ")"
		public Group getGroup() { return cGroup; }

		//"goTo("
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }

		//url=URL
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//URL
		public RuleCall getUrlURLTerminalRuleCall_1_0() { return cUrlURLTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIdAlternatives_1_0 = (Alternatives)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdStringValueParserRuleCall_1_0_0 = (RuleCall)cIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdVariableParserRuleCall_1_0_1 = (RuleCall)cIdAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionCheckboxActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//Checkbox:
		//	"checkbox(" id=(StringValue | Variable) ")" action=CheckboxAction;
		public ParserRule getRule() { return rule; }

		//"checkbox(" id=(StringValue | Variable) ")" action=CheckboxAction
		public Group getGroup() { return cGroup; }

		//"checkbox("
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }

		//id=(StringValue | Variable)
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//StringValue | Variable
		public Alternatives getIdAlternatives_1_0() { return cIdAlternatives_1_0; }

		//StringValue
		public RuleCall getIdStringValueParserRuleCall_1_0_0() { return cIdStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getIdVariableParserRuleCall_1_0_1() { return cIdVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//action=CheckboxAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//CheckboxAction
		public RuleCall getActionCheckboxActionParserRuleCall_3_0() { return cActionCheckboxActionParserRuleCall_3_0; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIdAlternatives_1_0 = (Alternatives)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdStringValueParserRuleCall_1_0_0 = (RuleCall)cIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdVariableParserRuleCall_1_0_1 = (RuleCall)cIdAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionLinkActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//Link:
		//	"link(" id=(StringValue | Variable) ")" action=LinkAction;
		public ParserRule getRule() { return rule; }

		//"link(" id=(StringValue | Variable) ")" action=LinkAction
		public Group getGroup() { return cGroup; }

		//"link("
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//id=(StringValue | Variable)
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//StringValue | Variable
		public Alternatives getIdAlternatives_1_0() { return cIdAlternatives_1_0; }

		//StringValue
		public RuleCall getIdStringValueParserRuleCall_1_0_0() { return cIdStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getIdVariableParserRuleCall_1_0_1() { return cIdVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//action=LinkAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//LinkAction
		public RuleCall getActionLinkActionParserRuleCall_3_0() { return cActionLinkActionParserRuleCall_3_0; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIdAlternatives_1_0 = (Alternatives)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdStringValueParserRuleCall_1_0_0 = (RuleCall)cIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdVariableParserRuleCall_1_0_1 = (RuleCall)cIdAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionButtonActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//Button:
		//	"button(" id=(StringValue | Variable) ")" action=ButtonAction;
		public ParserRule getRule() { return rule; }

		//"button(" id=(StringValue | Variable) ")" action=ButtonAction
		public Group getGroup() { return cGroup; }

		//"button("
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//id=(StringValue | Variable)
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//StringValue | Variable
		public Alternatives getIdAlternatives_1_0() { return cIdAlternatives_1_0; }

		//StringValue
		public RuleCall getIdStringValueParserRuleCall_1_0_0() { return cIdStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getIdVariableParserRuleCall_1_0_1() { return cIdVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//action=ButtonAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//ButtonAction
		public RuleCall getActionButtonActionParserRuleCall_3_0() { return cActionButtonActionParserRuleCall_3_0; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIdAlternatives_1_0 = (Alternatives)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdStringValueParserRuleCall_1_0_0 = (RuleCall)cIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdVariableParserRuleCall_1_0_1 = (RuleCall)cIdAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionImageActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//Image:
		//	"image(" id=(StringValue | Variable) ")" action=ImageAction;
		public ParserRule getRule() { return rule; }

		//"image(" id=(StringValue | Variable) ")" action=ImageAction
		public Group getGroup() { return cGroup; }

		//"image("
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//id=(StringValue | Variable)
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//StringValue | Variable
		public Alternatives getIdAlternatives_1_0() { return cIdAlternatives_1_0; }

		//StringValue
		public RuleCall getIdStringValueParserRuleCall_1_0_0() { return cIdStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getIdVariableParserRuleCall_1_0_1() { return cIdVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//action=ImageAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//ImageAction
		public RuleCall getActionImageActionParserRuleCall_3_0() { return cActionImageActionParserRuleCall_3_0; }
	}

	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIdAlternatives_1_0 = (Alternatives)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdStringValueParserRuleCall_1_0_0 = (RuleCall)cIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cIdVariableParserRuleCall_1_0_1 = (RuleCall)cIdAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionTextActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//TextField:
		//	"textField(" id=(StringValue | Variable) ")" action=TextAction;
		public ParserRule getRule() { return rule; }

		//"textField(" id=(StringValue | Variable) ")" action=TextAction
		public Group getGroup() { return cGroup; }

		//"textField("
		public Keyword getTextFieldKeyword_0() { return cTextFieldKeyword_0; }

		//id=(StringValue | Variable)
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//StringValue | Variable
		public Alternatives getIdAlternatives_1_0() { return cIdAlternatives_1_0; }

		//StringValue
		public RuleCall getIdStringValueParserRuleCall_1_0_0() { return cIdStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getIdVariableParserRuleCall_1_0_1() { return cIdVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//action=TextAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//TextAction
		public RuleCall getActionTextActionParserRuleCall_3_0() { return cActionTextActionParserRuleCall_3_0; }
	}

	public class CheckboxActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckboxAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClickParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClearParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CheckboxAction:
		//	Click | IsCheck | Clear;
		public ParserRule getRule() { return rule; }

		//Click | IsCheck | Clear
		public Alternatives getAlternatives() { return cAlternatives; }

		//Click
		public RuleCall getClickParserRuleCall_0() { return cClickParserRuleCall_0; }

		//IsCheck
		public RuleCall getIsCheckParserRuleCall_1() { return cIsCheckParserRuleCall_1; }

		//Clear
		public RuleCall getClearParserRuleCall_2() { return cClearParserRuleCall_2; }
	}

	public class LinkActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkAction");
		private final RuleCall cClickParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LinkAction:
		//	Click;
		public ParserRule getRule() { return rule; }

		//Click
		public RuleCall getClickParserRuleCall() { return cClickParserRuleCall; }
	}

	public class ButtonActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonAction");
		private final RuleCall cClickParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ButtonAction:
		//	Click;
		public ParserRule getRule() { return rule; }

		//Click
		public RuleCall getClickParserRuleCall() { return cClickParserRuleCall; }
	}

	public class ImageActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageAction");
		private final RuleCall cClickParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImageAction:
		//	Click;
		public ParserRule getRule() { return rule; }

		//Click
		public RuleCall getClickParserRuleCall() { return cClickParserRuleCall; }
	}

	public class TextActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFillParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClearParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TextAction:
		//	CheckValue | Fill | Clear;
		public ParserRule getRule() { return rule; }

		//CheckValue | Fill | Clear
		public Alternatives getAlternatives() { return cAlternatives; }

		//CheckValue
		public RuleCall getCheckValueParserRuleCall_0() { return cCheckValueParserRuleCall_0; }

		//Fill
		public RuleCall getFillParserRuleCall_1() { return cFillParserRuleCall_1; }

		//Clear
		public RuleCall getClearParserRuleCall_2() { return cClearParserRuleCall_2; }
	}

	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Click");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cActionClickKeyword_0 = (Keyword)cActionAssignment.eContents().get(0);
		
		//Click:
		//	action=".click()";
		public ParserRule getRule() { return rule; }

		//action=".click()"
		public Assignment getActionAssignment() { return cActionAssignment; }

		//".click()"
		public Keyword getActionClickKeyword_0() { return cActionClickKeyword_0; }
	}

	public class IsCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValBooleanEnumRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IsCheck:
		//	".isCheck(" val=Boolean ")";
		public ParserRule getRule() { return rule; }

		//".isCheck(" val=Boolean ")"
		public Group getGroup() { return cGroup; }

		//".isCheck("
		public Keyword getIsCheckKeyword_0() { return cIsCheckKeyword_0; }

		//val=Boolean
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//Boolean
		public RuleCall getValBooleanEnumRuleCall_1_0() { return cValBooleanEnumRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ClearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clear");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cActionClearKeyword_0 = (Keyword)cActionAssignment.eContents().get(0);
		
		//Clear:
		//	action=".clear()";
		public ParserRule getRule() { return rule; }

		//action=".clear()"
		public Assignment getActionAssignment() { return cActionAssignment; }

		//".clear()"
		public Keyword getActionClearKeyword_0() { return cActionClearKeyword_0; }
	}

	public class CheckValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueStringValueParserRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueVariableParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CheckValue:
		//	".verify(" value=(StringValue | Variable) ")";
		public ParserRule getRule() { return rule; }

		//".verify(" value=(StringValue | Variable) ")"
		public Group getGroup() { return cGroup; }

		//".verify("
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }

		//value=(StringValue | Variable)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//StringValue | Variable
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//StringValue
		public RuleCall getValueStringValueParserRuleCall_1_0_0() { return cValueStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getValueVariableParserRuleCall_1_0_1() { return cValueVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueStringValueParserRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueVariableParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Fill:
		//	".fill(" value=(StringValue | Variable) ")";
		public ParserRule getRule() { return rule; }

		//".fill(" value=(StringValue | Variable) ")"
		public Group getGroup() { return cGroup; }

		//".fill("
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }

		//value=(StringValue | Variable)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//StringValue | Variable
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//StringValue
		public RuleCall getValueStringValueParserRuleCall_1_0_0() { return cValueStringValueParserRuleCall_1_0_0; }

		//Variable
		public RuleCall getValueVariableParserRuleCall_1_0_1() { return cValueVariableParserRuleCall_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Values");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Values:
		//	IntValue | StringValue | BooleanValue;
		public ParserRule getRule() { return rule; }

		//IntValue | StringValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=Boolean;
		public ParserRule getRule() { return rule; }

		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_0() { return cValueBooleanEnumRuleCall_0; }
	}
	
	
	public class BooleanElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Boolean:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}

	public class OpenBrowserElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OpenBrowser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChromeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChromeChromeKeyword_0_0 = (Keyword)cChromeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFirefoxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFirefoxFirefoxKeyword_1_0 = (Keyword)cFirefoxEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OpenBrowser:
		//	Chrome | Firefox;
		public EnumRule getRule() { return rule; }

		//Chrome | Firefox
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chrome
		public EnumLiteralDeclaration getChromeEnumLiteralDeclaration_0() { return cChromeEnumLiteralDeclaration_0; }

		//"Chrome"
		public Keyword getChromeChromeKeyword_0_0() { return cChromeChromeKeyword_0_0; }

		//Firefox
		public EnumLiteralDeclaration getFirefoxEnumLiteralDeclaration_1() { return cFirefoxEnumLiteralDeclaration_1; }

		//"Firefox"
		public Keyword getFirefoxFirefoxKeyword_1_0() { return cFirefoxFirefoxKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final SubroutineElements pSubroutine;
	private final SubBodyElements pSubBody;
	private final HeadElements pHead;
	private final FunctionNameElements pFunctionName;
	private final MainElements pMain;
	private final BodyElements pBody;
	private final VariableReferenceElements pVariableReference;
	private final FunctionReferenceElements pFunctionReference;
	private final FunctionCallElements pFunctionCall;
	private final CallTypeElements pCallType;
	private final VariableElements pVariable;
	private final VariableNameElements pVariableName;
	private final DeclarationElements pDeclaration;
	private final InstructionElements pInstruction;
	private final GoToElements pGoTo;
	private final CheckboxElements pCheckbox;
	private final LinkElements pLink;
	private final ButtonElements pButton;
	private final ImageElements pImage;
	private final TextFieldElements pTextField;
	private final CheckboxActionElements pCheckboxAction;
	private final LinkActionElements pLinkAction;
	private final ButtonActionElements pButtonAction;
	private final ImageActionElements pImageAction;
	private final TextActionElements pTextAction;
	private final ClickElements pClick;
	private final IsCheckElements pIsCheck;
	private final ClearElements pClear;
	private final CheckValueElements pCheckValue;
	private final FillElements pFill;
	private final ValuesElements pValues;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final BooleanElements unknownRuleBoolean;
	private final OpenBrowserElements unknownRuleOpenBrowser;
	private final TerminalRule tURL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrowserDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pSubroutine = new SubroutineElements();
		this.pSubBody = new SubBodyElements();
		this.pHead = new HeadElements();
		this.pFunctionName = new FunctionNameElements();
		this.pMain = new MainElements();
		this.pBody = new BodyElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pFunctionReference = new FunctionReferenceElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pCallType = new CallTypeElements();
		this.pVariable = new VariableElements();
		this.pVariableName = new VariableNameElements();
		this.pDeclaration = new DeclarationElements();
		this.pInstruction = new InstructionElements();
		this.pGoTo = new GoToElements();
		this.pCheckbox = new CheckboxElements();
		this.pLink = new LinkElements();
		this.pButton = new ButtonElements();
		this.pImage = new ImageElements();
		this.pTextField = new TextFieldElements();
		this.pCheckboxAction = new CheckboxActionElements();
		this.pLinkAction = new LinkActionElements();
		this.pButtonAction = new ButtonActionElements();
		this.pImageAction = new ImageActionElements();
		this.pTextAction = new TextActionElements();
		this.pClick = new ClickElements();
		this.pIsCheck = new IsCheckElements();
		this.pClear = new ClearElements();
		this.pCheckValue = new CheckValueElements();
		this.pFill = new FillElements();
		this.pValues = new ValuesElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.unknownRuleBoolean = new BooleanElements();
		this.unknownRuleOpenBrowser = new OpenBrowserElements();
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.mda.project.BrowserDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"browser " browser=OpenBrowser ";" variables+=Declaration* subroutines+=Subroutine* main=Main;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Subroutine:
	//	"sub " head=Head body=SubBody;
	public SubroutineElements getSubroutineAccess() {
		return pSubroutine;
	}
	
	public ParserRule getSubroutineRule() {
		return getSubroutineAccess().getRule();
	}

	//SubBody:
	//	"{" instructions+=Instruction ";" (instructions+=Instruction ";")* "}";
	public SubBodyElements getSubBodyAccess() {
		return pSubBody;
	}
	
	public ParserRule getSubBodyRule() {
		return getSubBodyAccess().getRule();
	}

	//Head:
	//	name=FunctionName "()" | name=FunctionName "(var " nameParameters+=VariableName (", var "
	//	nameParameters+=VariableName)* ")";
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	//FunctionName:
	//	name=STRING;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//Main:
	//	"main" body=Body;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//Body:
	//	"{" url=GoTo ";" instructions+=Instruction ";" (instructions+=Instruction ";")* "}";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//VariableReference:
	//	varID=[VariableName];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//FunctionReference:
	//	functionName=[FunctionName];
	public FunctionReferenceElements getFunctionReferenceAccess() {
		return pFunctionReference;
	}
	
	public ParserRule getFunctionReferenceRule() {
		return getFunctionReferenceAccess().getRule();
	}

	//FunctionCall:
	//	function=FunctionReference "()" | function=FunctionReference "(" parameters+=CallType (", " parameters+=CallType)*
	//	")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//CallType:
	//	Values | Variable;
	public CallTypeElements getCallTypeAccess() {
		return pCallType;
	}
	
	public ParserRule getCallTypeRule() {
		return getCallTypeAccess().getRule();
	}

	//Variable:
	//	VariableReference;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//VariableName:
	//	name=STRING;
	public VariableNameElements getVariableNameAccess() {
		return pVariableName;
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}

	//Declaration:
	//	"var " variable=VariableName " = " value=Values ";";
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Instruction:
	//	Link | Button | Image | TextField | Checkbox | GoTo | FunctionCall;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//GoTo:
	//	"goTo(" url=URL ")";
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}

	//Checkbox:
	//	"checkbox(" id=(StringValue | Variable) ")" action=CheckboxAction;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}

	//Link:
	//	"link(" id=(StringValue | Variable) ")" action=LinkAction;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//Button:
	//	"button(" id=(StringValue | Variable) ")" action=ButtonAction;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//Image:
	//	"image(" id=(StringValue | Variable) ")" action=ImageAction;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//TextField:
	//	"textField(" id=(StringValue | Variable) ")" action=TextAction;
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}

	//CheckboxAction:
	//	Click | IsCheck | Clear;
	public CheckboxActionElements getCheckboxActionAccess() {
		return pCheckboxAction;
	}
	
	public ParserRule getCheckboxActionRule() {
		return getCheckboxActionAccess().getRule();
	}

	//LinkAction:
	//	Click;
	public LinkActionElements getLinkActionAccess() {
		return pLinkAction;
	}
	
	public ParserRule getLinkActionRule() {
		return getLinkActionAccess().getRule();
	}

	//ButtonAction:
	//	Click;
	public ButtonActionElements getButtonActionAccess() {
		return pButtonAction;
	}
	
	public ParserRule getButtonActionRule() {
		return getButtonActionAccess().getRule();
	}

	//ImageAction:
	//	Click;
	public ImageActionElements getImageActionAccess() {
		return pImageAction;
	}
	
	public ParserRule getImageActionRule() {
		return getImageActionAccess().getRule();
	}

	//TextAction:
	//	CheckValue | Fill | Clear;
	public TextActionElements getTextActionAccess() {
		return pTextAction;
	}
	
	public ParserRule getTextActionRule() {
		return getTextActionAccess().getRule();
	}

	//Click:
	//	action=".click()";
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}

	//IsCheck:
	//	".isCheck(" val=Boolean ")";
	public IsCheckElements getIsCheckAccess() {
		return pIsCheck;
	}
	
	public ParserRule getIsCheckRule() {
		return getIsCheckAccess().getRule();
	}

	//Clear:
	//	action=".clear()";
	public ClearElements getClearAccess() {
		return pClear;
	}
	
	public ParserRule getClearRule() {
		return getClearAccess().getRule();
	}

	//CheckValue:
	//	".verify(" value=(StringValue | Variable) ")";
	public CheckValueElements getCheckValueAccess() {
		return pCheckValue;
	}
	
	public ParserRule getCheckValueRule() {
		return getCheckValueAccess().getRule();
	}

	//Fill:
	//	".fill(" value=(StringValue | Variable) ")";
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}

	//Values:
	//	IntValue | StringValue | BooleanValue;
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//BooleanValue:
	//	value=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//enum Boolean:
	//	true | false;
	public BooleanElements getBooleanAccess() {
		return unknownRuleBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//enum OpenBrowser:
	//	Chrome | Firefox;
	public OpenBrowserElements getOpenBrowserAccess() {
		return unknownRuleOpenBrowser;
	}
	
	public EnumRule getOpenBrowserRule() {
		return getOpenBrowserAccess().getRule();
	}

	//// Query terminal URL:
	//	"a".."z"+ // Protocol
	//	"://" ("0".."9"+ "." "0".."9"+ "." "0".."9"+ "." "0".."9"+ // Hostname
	//	| ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")* ("." ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9"
	//	| "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")*)*) (":" "0".."9"+)? // Portnumber
	//	("/" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "~" | "+" | "." | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")*)* // Path
	//	("?" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")+ ("+" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" |
	//	"=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")+)*)?;
	public TerminalRule getURLRule() {
		return tURL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
