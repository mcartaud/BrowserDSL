grammar org.xtext.mda.project.BrowserDSL with org.eclipse.xtext.common.Terminals

generate browserDSL "http://www.xtext.org/mda/project/BrowserDSL"

Program:
	'browser ' browser=OpenBrowser ';'
	subroutines+=Subroutine*
	main=Main	
;

Subroutine:
	'sub ' head=Head body=Body
;

Head:
	(name=FunctionName '()')
	| (name=FunctionName '(var ' nameParameters+=VariableName (', var ' nameParameters+=VariableName)* ')')
;

FunctionReference:
	functionName=[FunctionName]
;

VariableReference:
	varID=[VariableName]
;

FunctionCall:
	(function = FunctionReference '();' )
	| (function = FunctionReference '(' parameters+=Expression (', ' parameters+=Expression)* ');')
;

FunctionName:
	name=STRING
;

Main:
	'main' body=Body
;

Body:
	'{'
	instructions+=Instruction ( instructions+=Instruction)* 
	'}'
;

enum OpenBrowser:
	Chrome|Firefox|HtmlUnitDriver
;

Instruction:
	Declaration
	| Condition
	| While
	| ActionInstruction
	| Assignation
	| FunctionCall
;

Condition:
	'if '('all ' | 'any ')? '('expression=Expression ')'
	'then ' instructionsIf+=Instruction+ 
	('else ' instructionsElse+=Instruction+)?
	'endif '
;

While:
    'while (' expression=Expression ') do '
        instructions+=Instruction+ 
    'endwhile'
;

ActionInstruction:
	Click | Check | Fill | Clear | GoTo
;

VariableName:
	name=STRING
;

Declaration:
	'var ' variable=VariableName ' = ' value=(Expression|Element) ';'
;

Assignation:
	variable=VariableReference ' = ' value=Expression ';'
;

Expression:
	StringValue | Variable | ActionExpression | NotEpression | BinarieExpression
;

NotEpression:
	' !' exp=Expression
;

BinarieExpression:
	((' == ' | ' > ' | ' < ') leftExpression=Expression rightExpression=Expression)
;


Variable:
	VariableReference
;

ActionExpression:
	Verify | Exist
;

Element:
	ClickableElement | FillableElement | CheckableElement
;

ClickableElement:
	Link | Button | Image
;

FillableElement:
	TextField
;

CheckableElement:
	Checkbox
;

Checkbox:
	'checkbox ' (value=(StringValue | Variable)) 
;

Link:
	'link ' (value=(StringValue | Variable)) 
;

Button:
	'button ' (value=(StringValue | Variable))
;

Image:
	'image ' (value=(StringValue | Variable))
;

TextField:
	'textField ' (value=(StringValue | Variable))
;


Select:
	'select(' value=TypeElement ')'
;


Click:
	'click(' element=(ClickableElement | Select | Variable) ');'
;

Check:
	'check(' element=(CheckableElement | Select | Variable) ');'
;

Fill:
	'fill(' element=(FillableElement | Select | Variable) ', value=' value=STRING ');'
;

Clear:
	'clear(' element=(FillableElement | CheckableElement | Select | Variable) ');'
;

Verify:
	'verify(' element=(FillableElement | CheckableElement | Select | Variable) ', value=' value=STRING ');'
;

Exist:
	'exist(' element=(Element | Select | Variable) ');'
;

GoTo:
	'goTo(' url=URL ');'
;

enum TypeElement:
	Checkbox|Link|Button|Image|TextField
;

StringValue : 
	value=STRING
;

terminal URL:
    ('a'..'z')+ '://' // Protocol
 
    ( // Hostname
        (
            ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9')+
        ) |
        (
            ('a'..'z'|'A'..'Z')
            (
                'a'..'z'|'A'..'Z'|
                '0'..'9'|
                '$'|
                '-'|
                '_'|
                (
                    '\\'
                    ('0'..'9'|'a'..'f'|'A'..'F')
                    ('0'..'9'|'a'..'f'|'A'..'F')
                ) |
                (
                    '%'
                    ('0'..'9')
                    ('0'..'9')
                )
            )*
            (
                '.'
                ('a'..'z'|'A'..'Z')
                (
                    'a'..'z'|'A'..'Z'|
                    '0'..'9'|
                    '$'|
                    '-'|
                    '_'|
                    (
                        '\\'
                        ('0'..'9'|'a'..'f'|'A'..'F')
                        ('0'..'9'|'a'..'f'|'A'..'F')
                    ) |
                    (
                        '%'
                        ('0'..'9')
                        ('0'..'9')
                    )
                )*
            )*
        )
    )
    (':' ('0'..'9')+)? // Portnumber
 
    ('/'
        (
            'a'..'z'|'A'..'Z'|
            '0'..'9'|
            '$'|
            '-'|
            '_'|
            '~'|
            '+'|
            '.'|
            (
                '\\'
                ('0'..'9'|'a'..'f'|'A'..'F')
                ('0'..'9'|'a'..'f'|'A'..'F')
            ) |
            (
                '%'
                ('0'..'9')
                ('0'..'9')
            )
        )*
    )* // Path
 
    ('?'
        (
            'a'..'z'|'A'..'Z'|
            '0'..'9'|
            '$'|
            '-'|
            '_'|
            '='|
            '&'|
            ';'|
            (
                '\\'
                ('0'..'9'|'a'..'f'|'A'..'F')
                ('0'..'9'|'a'..'f'|'A'..'F')
            ) |
            (
                '%'
                ('0'..'9')
                ('0'..'9')
            )
        )+
 
        ('+'
            (
                'a'..'z'|'A'..'Z'|
                '0'..'9'|
                '$'|
                '-'|
                '_'|
                '='|
                '&'|
                ';'|
                (
                    '\\'
                    ('0'..'9'|'a'..'f'|'A'..'F')
                    ('0'..'9'|'a'..'f'|'A'..'F')
                ) |
                (
                    '%'
                    ('0'..'9')
                    ('0'..'9')
                )
            )+
        )*
    )?; // Query